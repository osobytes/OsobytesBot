# This is a basic workflow to help you get started with Actions

name: Build Docker container, Push to ACR and Deploy to Azure Container Instance.

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
    #build-and-push:
    #    runs-on: ubuntu-latest
    #    steps:
    #    # checkout the repo
    #    - name: 'Checkout GitHub Action'
    #      uses: actions/checkout@main
    #    - name: Setup .NET
    #      uses: actions/setup-dotnet@v1
    #      with:
    #        dotnet-version: 5.0.x
    #    - name: Restore dotnet dependencies
    #      run: dotnet restore
    #    - name: Build dotnet projects
    #      run: dotnet build
    #    - name: Run unit tests
    #      run: dotnet test
    #    - name: 'Login via Azure CLI'
    #      uses: azure/login@v1
    #      with:
    #        creds: ${{ secrets.AZURE_CREDENTIALS }}
    #    - name: 'Build and push image'
    #      uses: azure/docker-login@v1
    #      with:
    #        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
    #        username: ${{ secrets.REGISTRY_USERNAME }}
    #        password: ${{ secrets.REGISTRY_PASSWORD }}
    #    - run: |
    #        docker build -f ${{ github.workspace }}/UnityBotService/Dockerfile -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/unitybotservice:${{ github.sha }} .
    #        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/unitybotservice:${{ github.sha }}
    deploy-to-container-instance:
        # needs: build-and-push
        runs-on: ubuntu-latest
        defaults:
          run:
            working-directory: ${{ github.workspace }}/UnityBotService/Deployment
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
        - run: |
            awk -v registryUsername=${{ secrets.REGISTRY_USERNAME }} -v registryPassword=${{ secrets.REGISTRY_PASSWORD }} -v imageVersion=${{ github.sha }} '{
              sub(/{REGISTRY_USERNAME}/, registryUsername);
              sub(/{REGISTRY_PASSWORD}/, registryPassword);
              sub(/{IMAGE_VERSION}/, imageVersion);
              print;
            }' parameters.template.json > parameters.json
        - run: |
            encodedApiKey=$(echo ${{ secrets.TWITTER_APIKEY }} | base64)
            encodedApiSecret=$(echo ${{ secrets.TWITTER_APISECRET }} | base64)
            encodedAccessToken=$(echo ${{ secrets.TWITTER_ACCESSTOKEN }} | base64)
            encodedAccessTokenSecret=$(echo ${{ secrets.TWITTER_ACCESSTOKENSECRET }} | base64)
            encodedBearerToken=$(echo ${{ secrets.TWITTER_BEARERTOKEN }} | base64)
            awk -v encodedApiKey=$encodedApiKey -v encodedApiSecret=$encodedApiSecret -v encodedAccessToken=$encodedAccessToken -v encodedAccessTokenSecret=$encodedAccessTokenSecret -v encodedBearerToken=$encodedBearerToken '{
              sub(/{TWITTER_APIKEY}/, encodedApiKey);
              sub(/{TWITTER_APISECRET}/, encodedApiSecret);
              sub(/{TWITTER_ACCESSTOKEN}/, encodedAccessToken);
              sub(/{TWITTER_ACCESSTOKENSECRET}/, encodedAccessTokenSecret);
              sub(/{TWITTER_BEARERTOKEN}/, encodedBearerToken);
              print;
            }' template.template.json > template.json

        # - name: 'Deploy to Azure Container Instances'
        #  uses: 'azure/cli@1.0.4'
        #  with:
        #    inlineScript: 'deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ${{ github.workspace }}/UnityBotService/Deployment/template.json -p ${{ github.workspace }}/UnityBotService/Deployment/parameters.json'
