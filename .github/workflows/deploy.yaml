# This is a basic workflow to help you get started with Actions

name: Build Docker container, Push to ACR and Deploy to Azure Container Instance.

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master/main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: 5.0.x
        - name: Restore dotnet dependencies
          run: dotnet restore
        - name: Build dotnet projects
          run: dotnet build
        - name: Run unit tests
          run: dotnet test
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        - name: 'Build and push image'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
        - run: |
            docker build -f ${{ github.workspace }}/UnityBotService/Dockerfile -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/unitybotservice:${{ github.sha }} .
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/unitybotservice:${{ github.sha }}
    deploy-to-container-instance:
        needs: build-and-push
        runs-on: ubuntu-latest
        defaults:
          run:
            working-directory: ${{ github.workspace }}/UnityBotService/Deployment
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
        - name: Create parameters file
          env:
            REG_UNAME: ${{ secrets.REGISTRY_USERNAME }}
            REG_PWD: ${{ secrets.REGISTRY_PASSWORD }}
            IMAGE_VERSION: ${{ github.sha }}
            REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          run: |
            awk -v registryUsername="$REG_UNAME" -v registryPassword="$REG_PWD" -v imageVersion="$IMAGE_VERSION" -v registryUrl="$REGISTRY_URL" '{
              sub(/{REGISTRY_USERNAME}/, registryUsername);
              sub(/{REGISTRY_PASSWORD}/, registryPassword);
              sub(/{IMAGE_VERSION}/, imageVersion);
              sub(/{REGISTRY_URL}/, registryUrl);
              print;
            }' parameters.template.json > $RUNNER_TEMP/parameters.json
        - name: Create template file
          env:
            TWITTER_APIKEY: ${{ secrets.TWITTER_APIKEY }}
            TWITTER_APISECRET: ${{ secrets.TWITTER_APISECRET }}
            TWITTER_ACCESSTOKEN: ${{ secrets.TWITTER_ACCESSTOKEN }}
            TWITTER_ACCESSTOKENSECRET: ${{ secrets.TWITTER_ACCESSTOKENSECRET }}
            TWITTER_BEARERTOKEN: ${{ secrets.TWITTER_BEARERTOKEN }}
            RESOURCEGROUP_ID: ${{ secrets.RESOURCEGROUP_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          run: |
            encodedApiKey=$(echo $TWITTER_APIKEY | base64)
            encodedApiSecret=$(echo $TWITTER_APISECRET | base64)
            encodedAccessToken=$(echo $TWITTER_ACCESSTOKEN | base64)
            encodedAccessTokenSecret=$(echo $TWITTER_ACCESSTOKENSECRET | base64)
            encodedBearerToken=$(echo $TWITTER_BEARERTOKEN | base64)
            awk -v encodedApiKey="$encodedApiKey" -v encodedApiSecret="$encodedApiSecret" -v encodedAccessToken="$encodedAccessToken" -v encodedAccessTokenSecret="$encodedAccessTokenSecret" -v encodedBearerToken="$encodedBearerToken" -v resourceGroupId="$RESOURCEGROUP_ID" -v subscriptionId="$SUBSCRIPTION_ID" '{
              sub(/{TWITTER_APIKEY}/, encodedApiKey);
              sub(/{TWITTER_APISECRET}/, encodedApiSecret);
              sub(/{TWITTER_ACCESSTOKEN}/, encodedAccessToken);
              sub(/{TWITTER_ACCESSTOKENSECRET}/, encodedAccessTokenSecret);
              sub(/{TWITTER_BEARERTOKEN}/, encodedBearerToken);
              sub(/{RESOURCEGROUP_ID}/, resourceGroupId);
              sub(/{SUBSCRIPTION_ID}/, subscriptionId);
              print;
            }' template.template.json > $RUNNER_TEMP/template.json
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        - name: 'Deploy to Azure Container Instances'
          env:
            RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          run: |
            az deployment group create -g $RESOURCE_GROUP -f ${{ runner.temp }}/template.json -p ${{ runner.temp }}/parameters.json
